FastPower <- function(base, expont){
if(expont == 0){
return 1
} else{
if(expont % 2 == 1){
return base * FastPower(base * base, (expont-1)/2)
}else{
return FastPower(base*base,expont/2)
}
}
}
FastPower <- function(base, expont){
if(expont == 0){
return 1
} else{
if(expont % 2 == 1){
return base * FastPower(base * base, (expont-1)/2)
}else{
return FastPower(base*base,expont/2)
}
}
}
FastPower <- function(base, expont){
if(expont == 0){
return(1)
} else{
if(expont % 2 == 1){
return(base * FastPower(base * base, (expont-1)/2))
}else{
return(FastPower(base*base,expont/2))
}
}
}
5 % 2
5 %% 2
FastPower <- function(base, expont){
if(expont == 0) return(1)
if(expont %% 2 == 1) return(base * FastPower(base*base, (expont - 1)/2))
return(FastPower(base*base, expont/2))
}
FastPower(2,5)
FastPower(3,3)
interval <- c(5.573, 11.427)
result <- (interval[2] - interval[1])/2
resutl
result
x1 <- 29.0
x2 <- 38.4
s1 <- 18.8
s2 <- 16.2
n1 <- 312
n2 <- 265
t <- (x1 - x2)/sqrt(s1^2 / n1 + s2^2 / n2)
t
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
1 - pt(t,v)
pt(t,v)
x1 <- 40 #a route
s1 <- 3
x2 <- 43 #b route
s2 <- 2
n1 <- 20
n2 <- 20
confidence <- 95
tail <- (1 - confidence/100)/2 + confidence /100
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
interval <- (x2 - x1) + c(-1,1) * qt(tail, v) * sqrt(s1^2 / n1 + s2^2 / n2)
interval
n1 <- 28
n2 <- 24
x1 <- 72.75
x2 <- 72.625
median1 <- 73
median2 <- 73
s1 <- 5.37225
s2 <- 7.69987
range1 <- 20
range2 <- 29
confidence <- 90
tail <- (1 - confidence/100)/2 + confidence /100
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
interval <- (x2 - x1) + c(-1,1) * qt(tail, v) * sqrt(s1^2 / n1 + s2^2 / n2)
interval
children <- c(40.3, 55, 45.7, 43.3, 50.3, 45.9, 53.5,43,
44.2, 44, 47.4, 44, 33.6, 55.1, 48.8, 50.4, 37.8, 60.3, 46.6)
adult <- c(20, 30.2, 2.2, 7.5, 4.4, 22.2, 16.6, 14.5,
21.4, 3.3, 6.6, 7.8, 10.6, 16.2, 14.5, 4.1, 15.8, 4.1, 2.4, 3.5,
8.5, 10, 1, 4.4, 1.3, 8.1, 4.7, 18.4)
confidence <- 95
tail <- (1 - confidence/100)/2 + confidence /100
x1 <- mean(children)
x2 <- mean(adult)
s1 <- sd(children)
s2 <- sd(adult)
n1 <- length(children)
n2 <- length(adult)
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
interval <- (x1 - x2) + c(-1,1) * qt(tail, v) * sqrt(s1^2 / n1 + s2^2 / n2)
inteval
interval
t <- (x1 - x2)/sqrt(s1^2 / n1 + s2^2 / n2)
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
n1 <- 26
n2 <- 22
x1 <- 5.07
x2 <- 6.58
s1 <- 1.84
s2 <- 2.91
t <- (x1 - x2)/sqrt(s1^2 / n1 + s2^2 / n2)
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
t
n1 <- 26
n2 <- 22
x1 <- 5.07
x2 <- 6.58
s1 <- 1.84
s2 <- 2.91
t <- (x1 - x2)/sqrt(s1^2 / n1 + s2^2 / n2)
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
result <- ifelse(t <= 0, pt(t,v)*2, 1 - pt(t,v))
result
v
t
n1 <- 28
n2 <- 24
x1 <- 72.75
x2 <- 72.625
median1 <- 73
median2 <- 73
s1 <- 5.37225
s2 <- 7.69987
range1 <- 20
range2 <- 29
confidence <- 90
tail <- (1 - confidence/100)/2 + confidence /100
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
interval <- (x2 - x1) + c(-1,1) * qt(tail, v) * sqrt(s1^2 / n1 + s2^2 / n2)
interval
n1 <- 26
n2 <- 22
x1 <- 5.07
x2 <- 6.58
s1 <- 1.84
s2 <- 2.91
t <- (x1 - x2)/sqrt(s1^2 / n1 + s2^2 / n2)
v = ((s1^2/n1 + s2^2/n2)^2)/((s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1))
result <- ifelse(t <= 0, pt(t,v)*2, (1 - pt(t,v))*2)
result
t
v
pt(t,v)
1- pt(t,v)
n1 <- 630
x1 <- n1 * 0.54
n2 <- 1010
x2 <- n2 * 0.51
p1 <- x1/n1
p2 <- x2/n2
confidence <- 90
tail <- (1 - confidence/100)/2 + confidence /100
result <- (p1 - p2) + c(-1, 1) * qnorm(tail) * sqrt((p1*(1-p1)/n1)+(p2*(1-p2)/n2))
result
#23
n1 <- 630
x1 <- n1 * 0.54
n2 <- 1010
x2 <- n2 * 0.51
p1 <- x1/n1
p2 <- x2/n2
prop1 <- 0.54
prop2 <- 0.51
p_bar <- ((prop1*n1) + (prop2*n2)) / (n1 + n2)
z <- (prop1 - prop2)/sqrt(p_bar*(1 - p_bar)*((1/n1)+(1/n2)))
z
result <- (1-pnorm(z))
result
setwd("D:/University/GAU-SEMESTER-IV/R2/ClassWork10")
library(readxl)
#load
myData <- read_xls("sat.xls")
View(myData)
plot(
myData$high_GPA,
myData$univ_GPA
)
plot(
myData$high_GPA,
myData$univ_GPA,
xlab = "High School GPA",
ylab = "University overall GPA"
)
cor(myData$high_GPA, myData$univ_GPA)
?lm
plot(
formula,
xlab = "High School GPA",
ylab = "University overall GPA"
)
formula <- myData$univ_GPA~myData$high_GPA
#1
plot(
formula,
xlab = "High School GPA",
ylab = "University overall GPA"
)
lm(formula)
formula <- lm(myData$univ_GPA~myData$high_GPA)
#1
plot(
formula,
xlab = "High School GPA",
ylab = "University overall GPA"
)
formula <- lm(myData$univ_GPA~myData$high_GPA)
#1
plot(
formula,
xlab = "High School GPA",
ylab = "University overall GPA"
)
plot(formula)
formula
plot(formula)
plot(formula)
coef(formula)
abline(formula)
plot(
formula,
xlab = "High School GPA",
ylab = "University overall GPA"
)
plot(
myData$high_GPA,
myData$univ_GPA,
xlab = "High School GPA",
ylab = "University overall GPA"
)
abline(formula)
myData <- read_xls("sat.xls")
formula <- lm(myData$univ_GPA~myData$high_GPA)
plot(formula)
plot(formula)
plot(
myData$high_GPA,
myData$univ_GPA,
xlab = "High School GPA",
ylab = "University overall GPA"
)
abline(formula)
predict(2.2)
?predict.lm
predict.lm(formula, 2.2)
predict.lm(formula, c(2.2))
predict.lm(formula, data.frame(2.2))
predict(formula, data.frame(2.2))
a <- predict(formula, data.frame(2.2))
?predict
myData <- read_xls("sat.xls")
plot(
myData$high_GPA,
myData$univ_GPA,
xlab = "High School GPA",
ylab = "University overall GPA"
)
abline(formula)
abline(myData$univ_GPA~myData$high_GPA)
plot(
myData$high_GPA,
myData$univ_GPA,
xlab = "High School GPA",
ylab = "University overall GPA"
)
abline(myData$univ_GPA~myData$high_GPA)
#1
plot(
myData$univ_GPA~myData$high_GPA,
xlab = "High School GPA",
ylab = "University overall GPA"
)
abline(myData$univ_GPA~myData$high_GPA)
formula <- lm(myData$univ_GPA~myData$high_GPA)
#1
plot(
myData$high_GPA,
myData$univ_GPA,
xlab = "High School GPA",
ylab = "University overall GPA"
)
abline(formula)
#3
formula <- lm(myData$univ_GPA~myData$high_GPA)
formula
coef(formula)$myData$high_GPA
coef(formula)
data.frame(coef(formula))
data.frame(coef(formula))$coef.formula.
coeficients <- data.frame(coef(formula))$coef.formula.
coeficients[2]
result <- coeficients * 2.2 + coeficients[1]
result
coeficients <- data.frame(coef(formula))$coef.formula.
result <- coeficients[2] * 2.2 + coeficients[1]
result
coeficients <- data.frame(coef(formula))$coef.formula.
result <- coeficients[2] * 4.0 + coeficients[1]
result
View(myData)
SATmean <- mean(c(myData$math_SAT, myData$verb_SAT))
SATmean
mean(myData$math_SAT)
mean(myData$verb_SAT)
myData <- read_xls("sat.xls")
mathMean <- mean(myData$math_SAT)
verbMean <- mean(myData$verb_SAT)
mathMean
verbMean
#3
formula <- lm(myData$univ_GPA~myData$high_GPA)
tapply(c(myData$math_SAT, myData$verb_SAT), sd)
myData <- read_xls("sat.xls")
sdMath <- sd(myData$math_SAT)
sdVerb <- sd(myData$verb_SAT)
sdMath
verbMean
sdVerb
cor(myData$math_SAT, myData$verb_SAT)
cor(myData$comp_GPA, myData$univ_GPA)
t.test(myData$univ_GPA, myData$comp_GPA, paired = T)
t.test(myData$univ_GPA, myData$comp_GPA, paired = T, alternative = "less")
meanOvar <- myData$univ_GPA
meanComp <- myData$comp_GPA
meanOvar
meanOvar <- mean(myData$univ_GPA)
meanComp <- mean(myData$comp_GPA)
totalMeanVector <- mean(myData$math_SAT, myData$verb_SAT)
totalMeanVector <- (myData$math_SAT + myData$verb_SAT)/2
totamMeanVector
totalMeanVector
lm(myData$univ_GPA~totalMeanVector)
totalMeanVector
lm(myData$univ_GPA~totalMeanVector)
summary(lm(myData$univ_GPA~totalMeanVector))
plot(
myData$univ_GPA,
totalMeanVector
)
abline(lm(myData$univ_GPA~totalMeanVector))
plot(
myData$univ_GPA,
totalMeanVector
)
abline(lm(myData$univ_GPA~totalMeanVector))
plot(
myData$univ_GPA~totalMeanVector
)
abline(lm(myData$univ_GPA~totalMeanVector))
lm(myData$univ_GPA~totalMeanVector)
plot(
totalMeanVector~myData$univ_GPA
)
abline(lm(totalMeanVector~myData$univ_GPA))
lm(totalMeanVector~myData$univ_GPA)
summary(lm(totalMeanVector~myData$univ_GPA))
lm(totalMeanVector~myData$univ_GPA)
prediction <- 85.62 * mean(c(600, 540)) + 339.18
prediction
mean(c(600, 540))
plot(
myData$univ_GPA~totalMeanVector
)
abline(lm(myData$univ_GPA~totalMeanVector))
lm(myData$univ_GPA~totalMeanVector)
#9.2
summary(lm(myData$univ_GPA~totalMeanVector))
lm(myData$univ_GPA~totalMeanVector)
prediction <- 0.005475 * mean(c(600, 540)) - 0.171606
prediction
t.test(myData$univ_GPA, totalMeanVector)
prediction
summary(lm(myData$univ_GPA~totalMeanVector))
iter <- 2.949144 + c(-1, 1) * 0.0005743 * qt(0.975, length(myData$univ_GPA - 1))
iter
