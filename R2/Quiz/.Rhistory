for (j in 1:1000) {
items <- sample(1:6, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent", i," : ", counter/10,"%"))
if(counter/10 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:1000) {
items <- sample(1:6, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/10,"%"))
if(counter/10 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:1000) {
items <- sample(1:15, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/10,"%"))
if(counter/10 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:1000) {
items <- sample(1:15, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/10,"%"))
if(counter/10 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:5000) {
items <- sample(1:15, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/50,"%"))
if(counter/50 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:5000) {
items <- sample(1:3, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/50,"%"))
if(counter/50 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:5000) {
items <- sample(1:3, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/50,"%"))
if(counter/50 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:5000) {
items <- sample(1:8, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/50,"%"))
if(counter/50 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:5000) {
items <- sample(1:10, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/50,"%"))
if(counter/50 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:5000) {
items <- sample(1:11, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/50,"%"))
if(counter/50 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:5000) {
items <- sample(1:13, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/50,"%"))
if(counter/50 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:2000) {
items <- sample(1:13, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/20,"%"))
if(counter/20 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:2000) {
items <- sample(1:13, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/20,"%"))
if(counter/20 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:2000) {
items <- sample(1:13, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/20,"%"))
if(counter/20 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:2000) {
items <- sample(1:13, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/20,"%"))
if(counter/20 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:10000) {
items <- sample(1:13, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/100,"%"))
if(counter/100 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
for (i in 2:15) {
counter <- 0
for (j in 1:1000) {
items <- sample(1:6, i, replace = T)
if(length(as.set(items)) < i){
counter <- counter + 1
}
}
print(paste0("Percent (", i,") : ", counter/10,"%"))
if(counter/10 == 100) {
print(paste0("Sucess on Roll : ",i))
break
}
}
setwd("D:/University/GAU-SEMESTER-IV/R2/Quiz")
setwd("D:/University/GAU-SEMESTER-IV/R2/Quiz")
library(readxl)
animalData <- read_xls('animals.xls')
View(animalData)
View(animalData)
View(animalData)
boxplot(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2],
names = c("Female", "Male"),
horizontal = T,
main="Animal Research is wrong by gender"
)
#1
boxplot(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2],
names = c("Female", "Male"),
main="Animal Research is wrong by gender"
)
boxplot(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2],
names = c("Female", "Male"),
horizontal = T,
main="Animal Research is wrong by gender",
xlab="Believe strength coeficient"
)
animalData$WRONG[animalData$GENDER == 1 && animalData$WRONG == 7]
animalData$WRONG[animalData$GENDER == 1]
animalData$WRONG[animalData$GENDER == 1] == 7
length(animalData$WRONG[animalData$GENDER == 1] == 7)
length(animalData$WRONG[animalData$GENDER == 1] == 7)
length(animalData$WRONG(animalData$WRONG[animalData$GENDER == 1] == 7))
animalData$WRONG[animalData$WRONG[animalData$GENDER == 1] == 7]
animalData$WRONG[animalData$GENDER == 1] == 7
#3
animalData$WRONG[animalData$WRONG[animalData$GENDER == 1] == 7]
animalData$WRONG[animalData$WRONG == 7]
animalData$WRONG[animalData$WRONG == 7 & animalData$GENDER == 1]
length(animalData$WRONG[animalData$WRONG == 7 & animalData$GENDER == 1])/length(animalData$WRONG[animalData$GENDER == 1])
100*length(animalData$WRONG[animalData$WRONG == 7 & animalData$GENDER == 1])/length(animalData$WRONG[animalData$GENDER == 1])
mean(animalData$WRONG[animalData$GENDER == 1]) - mean(animalData$WRONG[animalData$GENDER == 2])
#5
t.test(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2]
)
#1
boxplot(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2],
names = c("Female", "Male"),
horizontal = T,
main="Animal Research is wrong by gender",
xlab="Believe strength coeficient"
)
t.test(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2],
paired = T
)
#5
t.test(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2]
)
5
t.test(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2],
alternative = "less"
)
t.test(
animalData$WRONG[animalData$GENDER == 1],
animalData$WRONG[animalData$GENDER == 2],
alternative = "greater"
)
boxplot(
animalData$NECESSAR[animalData$GENDER == 1],
animalData$NECESSAR[animalData$GENDER == 2],
names = c("Female", "Male"),
horizontal = T,
main="Animal Research is necessary by gender",
xlab="Believe strength coeficient"
)
animalData$NECESSAR[animalData %in% c(1,2,3)]
animalData$NECESSAR[animalData$NECESSAR %in% c(1,2,3)]
animalData$NECESSAR[animalData$NECESSAR %in% c(1,2,3) & animalData$GENDER == 2]
animalData$NECESSAR[animalData$NECESSAR %in% c(1,2,3)]
View(animalData)
length(animalData$NECESSAR[animalData$NECESSAR %in% c(1,2,3) & animalData$GENDER == 2])
100*length(animalData$NECESSAR[animalData$NECESSAR %in% c(1,2,3) & animalData$GENDER == 2])/length(animalData$NECESSAR[animalData$GENDER == 2])
t.test(
animalData$NECESSAR[animalData$GENDER == 1],
animalData$NECESSAR[animalData$GENDER == 2]
)
t.test(
animalData$NECESSAR[animalData$GENDER == 1],
animalData$NECESSAR[animalData$GENDER == 2],
alternative = "less"
)
t.test(
animalData$NECESSAR[animalData$GENDER == 1],
animalData$NECESSAR[animalData$GENDER == 2],
alternative = "greater"
)
t.test(
animalData$NECESSAR[animalData$GENDER == 1],
animalData$NECESSAR[animalData$GENDER == 2]
)
cor(
animalData$WRONG,
animalData$NECESSAR
)
plot(
animalData$WRONG,
animalData$NECESSAR,
xlab = "Wrong",
ylab = "Necessary"
)
abline(lm(animalData$NECESSAR~animalData$WRONG))
plot(
animalData$WRONG,
animalData$NECESSAR,
xlab = "Wrong",
ylab = "Necessary",
col = "red"
)
plot(
animalData$WRONG,
animalData$NECESSAR,
xlab = "Wrong",
ylab = "Necessary",
col = ifelse(animalData$GENDER == 1, "green", "blue"),
pch = 19
)
plot(
animalData$WRONG,
animalData$NECESSAR,
xlab = "Wrong",
ylab = "Necessary",
col = ifelse(animalData$GENDER == 1, "green", "blue"),
pch = 19,
legend = "me"
)
plot(
animalData$WRONG,
animalData$NECESSAR,
xlab = "Wrong",
ylab = "Necessary",
col = ifelse(animalData$GENDER == 1, "green", "blue"),
pch = 19
)
abline(lm(animalData$NECESSAR~animalData$WRONG))
plot(
animalData$WRONG,
animalData$NECESSAR,
xlab = "Wrong",
ylab = "Necessary",
col = ifelse(animalData$GENDER == 1, "green", "blue"),
pch = 19,
main="Correlation Between Wrong & Necessary"
)
abline(lm(animalData$NECESSAR~animalData$WRONG))
stroopData <- read_xls("stroop.xls")
View(stroopData)
mean(stroopData$words)
#
mean(stroopData$colors)
sd(stroopData$colors)
boxplot(
stroopData$colors[stroopData$gender == 1],
stroopData$colors[stroopData$gender == 2],
names = c("Female", "Male"),
horizontal = T,
main="Color test by gender",
xlab="Time Needed to read"
)
install.packages("aplpack")
library(aplpack)
stem.leaf.backback(
stroopData$colors[stroopData$gender == 1],
stroopData$colors[stroopData$gender == 2]
)
View(stroopData)
stem.leaf(stroopData$interfer)
View(stroopData)
?stem.leaf
stem.leaf(stroopData$interfer, unit = 10)
stem.leaf(stroopData$interfer)
stem.leaf(co2)
stem.leaf(stroopData$interfer, scale = 2)
stem.leaf(stroopData$interfer, scale = 10)
stem.leaf(stroopData$interfer)
stem.leaf(cars$speed)
stem.leaf(stroopData$interfer)
stroopData$interfer
stem.leaf.backback(
stroopData$colors[stroopData$gender == 1],
stroopData$colors[stroopData$gender == 2]
)
plot(
stroopData$words,
stroopData$colors,
xlab = "Words",
ylab = "Colors"
)
plot(
stroopData$words,
stroopData$colors,
xlab = "Words",
ylab = "Colors"
)
abline(lm(stroopData$colors~stroopData$words))
cor(stroopData$words, stroopData$colors)
sort(stroopData$colors)
sort(stroopData$colors)[1:23]
stroopData[order(stroopData$colors)]
rlang::last_error()
stroopData[order(stroopData$colors),]
test <- stroopData[order(stroopData$colors),]
View(test)
View(stroopData)
#load stroop
stroopData <- read_xls("stroop.xls")
stroopOrdered <- stroopData[order(stroopData$colors),]
cor(stroopOrdered$words[1:23], stroopOrdered$colors[1:23])
cor(stroopData$words, stroopData$colors)
t.test(
stroopData$colors[stroopData$gender == 1],
stroopData$colors[stroopData$gender == 2],
)
t.test(stroopData$interfer)
confidence <- 95
tail <- (1 - confidence/100)/2 + confidence /100
size <- length(stroopData$interfer)
mean(stroopData$interfer) + c(-1,1) * (qt(tail, size - 1)* sd(stroopData$interfer))/sqrt(size)
t.test(
stroopData$colors,
stroopData$interfer
)
tvData <- read_xls("tv.xls")
View(tvData)
mean(tvData$TVHOURS)
max(tvData$TVHOURS) - min(tvData$TVHOURS)
boxplot(tvData$TVHOURS)
View(tvData)
mean(tvData$TVHOURS[tvData$TVHOURS < 8])
mean(tvData$TVHOURS)
tvData$TVHOURS[tvData$TVHOURS < 8]
sort(tvData$TVHOURS[tvData$TVHOURS < 8])
cor(
tvData$TVHOURS,
tvData$OBEDIENC
)
cor(
tvData$TVHOURS,
tvData$ATTITUDE
)
plot(tvData$TVHOURS,
tvData$OBEDIENC)
plot(tvData$TVHOURS,
tvData$ATTITUDE)
cor(
tvData$TVHOURS,
tvData$ATTITUDE
)
cor(
tvData$TVHOURS,
tvData$OBEDIENC
)
table(tvData$ATTITUDE)
View(tvData)
View(tvData)
